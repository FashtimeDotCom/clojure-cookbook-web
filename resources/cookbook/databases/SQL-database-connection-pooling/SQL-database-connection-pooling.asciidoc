[[sec_db_connecting_with_a_connection_pooling]]
=== Connecting to an SQL Database with a Connection Pool
[role="byline"]
by Tom Hicks and Filippo Diotalevi

==== Problem

You would like to connect to an SQL database efficiently using a connection pool.

==== Solution

Use the +BoneCP+ connection and statement pooling library to wrap your JDBC-based
drivers, creating a pooled data source. The pooled data source is then usable
by the +clojure.java.jdbc+ library, as described in the
<<sec_db_connecting_to_a_sql_database>> recipe.

Add a dependency to your Leiningen project file for the +BoneCP+ library. You
will also need to add dependencies for the +clojure.java.jdbc+ library and the
JDBC library used with the RDBMS you are connecting to (e.g. MySQL):

[source,clojure]
----
:dependencies [ ; ...
                [org.clojure/java.jdbc "0.3.0-alpha4"]
                [mysql/mysql-connector-java "5.1.25"]
                [com.jolbox/bonecp "0.7.1.RELEASE"]
----

In your +project.clj+ file, and import the +BoneCP+ classes you intend to use:

[source,clojure]
----
(ns myproj.core
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.sql :as sql])
  (:import com.jolbox.bonecp.BoneCPDataSource))
----


Create a database specification containing the parameters for accessing the
database:

[source,clojure]
----
(def db-spec {:classname "com.mysql.jdbc.Driver"
              :subprotocol "mysql"
              :subname "//localhost:3306/lotr_db"
              :user "bilbo"
              :password "secret"
              :init-pool-size 4
              :max-pool-size 20
              :partitions 2})
----

Define a function (for convenience) which uses the parameters in the database
specification map to create a pooled data source.

[source,clojure]
----
(defn pooled-datasource [db-spec]
  (let [ {:keys [classname subprotocol subname user password
                 init-pool-size max-pool-size idle-time partitions]} db-spec
         cpds (doto (BoneCPDataSource.)
               (.setDriverClass classname)
               (.setJdbcUrl (str "jdbc:" subprotocol ":" subname))
               (.setUsername user)
               (.setPassword password)
               (.setMinConnectionsPerPartition (inc (int (/ init-pool-size partitions))))
               (.setMaxConnectionsPerPartition (inc (int (/ max-pool partitions))))
               (.setPartitionCount partitions)
               (.setStatisticsEnabled true)
               (.setIdleMaxAgeInMinutes (or idle-time 60))
    {:datasource cpds} ))
----

Use the convenience function to define a pooled data source for connecting to
your database:

[source,clojure]
----
(def pooled-db-spec (pooled-datasource db-spec))
----

Pass the database specification as the first argument to several of the
library's other functions which query and manipulate your database.

[source,clojure]
----
(jdbc/insert! pooled-db-spec :players
              {:name "Bilbo" :type "hobbit"} {:name "Galadriel" :type "elf"}
              {:name "Frodo" :type "hobbit"} {:name "Ori" :type "dwarf"})
;; -> (nil nil nil nil)

(jdbc/query pooled-db-spec (sql/select * :players (sql/where {:type "hobbit"})))
;; -> ({:type "hobbit", :name "Bilbo"} {:type "hobbit", :name "Frodo"})
----

==== Discussion

As shown above, the +clojure.java.jdbc+ library can create database
connections from JDBC data sources, which allows connections to be easily
pooled by the +BoneCP+ or other pooling library.

The +BoneCP+ library wraps existing JDBC classes to allow the creation of
efficient data sources. It can adapt traditional unpooled drivers and
data sources by augmenting them with transparent pooling of +Connection+
and +PreparedStatement+ instances.

While the library offers several ways to create data sources,
most users will find the examples provided here to be the easiest.

+BoneCP+ offers several dozen configuration parameters which control
the operation of the data source and its connections. Luckily, most of these
configuration parameters have built-in defaults. Parameters may be specified
to control such facets as the min, max, and initial pool size; the number of
idle connections; the age of connections; transaction handling; the use of
+PreparedStatement+ pooling; and if, when, and how pooled connections are
tested.

Pooled data resources (threads and database connections) may be released by
calling the +close+ method on the +BoneCPDataSource+ class of the
library. Attempting to reuse the pooled data source after it is closed will result 
in an SQL exception.

[source,clojure]
----
(.close pooled-db-spec)
;; -> nil
----

==== See Also

* See <<sec_db_connecting_to_a_sql_database>> to learn about basic database connections with +clojure.java.jdbc+.
* See <<sec_db_manipulating_a_sql_database>> to learn about using +clojure.java.jdbc+ to interact with an SQL database.
* See the +BoneCP+ http://jolbox.com/index.html?page=http://jolbox.com/configuration.html[documentation] and https://github.com/wwadge/bonecp[GitHub repository]
* Visit the +clojure.java.jdbc+ https://github.com/clojure/java.jdbc[GitHub repository] for more detailed information on the library.
